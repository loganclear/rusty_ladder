# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[package]
name = "ladder_lib"
version = "0.0.4"
authors = ["reddal"]
edition = "2018"

[features]
default = []

# Enable protobuf for router rules.
use-protobuf = ["protobuf", "protobuf-codegen-pure"]
use-router-regex = ["regex"]
use-webapi = ["warp", "serde", "serde_json", "http"]

use-udp = []

# Enable URL parsing for some proxies.
parse-url = ["url", "percent-encoding", "base64"]
# Enable URL parsing using 
parse-url-v2rayn = ["parse-url", "serde", "serde_json"]

# Enable h2 transport.
# This will also enable `tls-transport-openssl` or `tls-transport-rustls` feature.
h2-transport-openssl = ["h2", "tls-transport-openssl", "http"]
h2-transport-rustls = ["h2", "tls-transport-rustls", "http"]

# Enable websocket transport.
# This will also enable `tls-transport-openssl` or `tls-transport-rustls` feature.
ws-transport-openssl = ["async-tungstenite", "tls-transport-openssl", "http"]
ws-transport-rustls = ["async-tungstenite", "tls-transport-rustls", "http"]

# Enable TLS transport.
# Requires OpenSSL.
tls-transport-openssl = ["__tls_openssl"]
tls-transport-rustls = ["__tls_rustls"]

# Enable browser transport.
# This can be unstable.
browser-transport = ["serde_json", "async-tungstenite", "base64", "serde"]

# Enable SOCKS5 proxy.
socks5-inbound = ["__transport-inbound"]
socks5-outbound = ["__transport-outbound"]

# Enable http proxy.
http-inbound = ["base64", "http", "httparse", "__transport-inbound"]
http-outbound = ["base64", "http", "httparse", "__transport-outbound"]

# Enable shadowsocks proxy.
# Requires OpenSSL for crypto.
shadowsocks-inbound-openssl = [
	"md-5",
	"hkdf",
	"sha-1",
	"__crypto_openssl",
	"__transport-inbound",
	"__codec",
]
shadowsocks-outbound-openssl = [
	"md-5",
	"hkdf",
	"sha-1",
	"__crypto_openssl",
	"__transport-outbound",
	"__codec",
]
shadowsocks-inbound-ring = [
	"md-5",
	"hkdf",
	"sha-1",
	"__crypto_crypto_ring",
	"__transport-inbound",
	"__codec",
]
shadowsocks-outbound-ring = [
	"md-5",
	"hkdf",
	"sha-1",
	"__crypto_crypto_ring",
	"__transport-outbound",
	"__codec",
]

# Enable vmess proxy.
# Requires OpenSSL for crypto.
vmess-inbound-ring = [
	"md-5",
	"uuid",
	"hmac",
	"sha2",
	"sha3",
	"crc",
	"__crypto_crypto_ring",
	"__transport-inbound",
	"__codec",
]
vmess-outbound-ring = [
	"md-5",
	"uuid",
	"hmac",
	"sha2",
	"sha3",
	"crc",
	"__crypto_crypto_ring",
	"__transport-outbound",
	"__codec",
]
vmess-inbound-openssl = [
	"md-5",
	"uuid",
	"hmac",
	"sha2",
	"sha3",
	"crc",
	"__crypto_openssl",
	"__transport-inbound",
	"__codec",
]
vmess-outbound-openssl = [
	"md-5",
	"uuid",
	"hmac",
	"sha2",
	"sha3",
	"crc",
	"__crypto_openssl",
	"__transport-outbound",
	"__codec",
]
vmess-legacy-auth = []

chain-outbound = []
trojan-outbound = ["sha2", "__transport-outbound"]

# Enable local DNS server.
local-dns = ["trust-dns-server", "trust-dns-client"]
local-dns-over-openssl = ["local-dns", "__tls_openssl"]
local-dns-over-rustls = ["local-dns", "__tls_rustls"]

# Enable serde support for configuration builder.
use_serde = ["serde"]

# **Private feature, do not enable manually.
# 
# Enable some cryptography functions for proxies 
# like shadowsocks and VMess.
__crypto_openssl = ["openssl"]
__crypto_crypto_ring = ["ring", "aes", "cfb-mode"]
__tls_openssl = ["openssl", "tokio-openssl"]
__tls_rustls = ["tokio-rustls", "webpki", "rustls-native-certs", "rustls-pemfile"]

# **Private feature, do not enable manually.
# Use transport.
__transport-inbound = []
__transport-outbound = []
__codec = []


[dependencies]
ladder_lib_macro = { path = "../ladder_lib_macro" }
futures = "0.3"
idna = "0.2"
tokio = { version = "1.0", default-features = false, features = [
	"rt-multi-thread",
	"net",
	"io-util",
	"sync",
	"time",
] }
log = { version = "0.4", features = ["std"] }
async-trait = "0.1"
bytes = "1.0"
rand = { version = "0.8" }
smol_str = { version = "0.1", features = ["serde"] }
serde = { version = "1.0", optional = true, default-features = false, features = [
	"derive",
] }
num_enum = "0.5"
parking_lot = "0.12"
lazy_static = "1.4"
thiserror = "1.0"

# URL parsing
url = { version = "2", optional = true }
percent-encoding = { version = "2", optional = true }

# Web API
warp = { version = "0.3", optional = true, default-features = false, features = [
	"compression",
] }

# Router
protobuf = { version = "2.24", optional = true }
regex = { version = "1.5", optional = true }

# DNS
trust-dns-server = { version = "0.20", optional = true }
trust-dns-client = { version = "0.20", optional = true }

# H2
h2 = { version = "0.3", features = ["stream"], optional = true }

# TLS
tokio-openssl = { version = "0.6", optional = true }
tokio-rustls = { version = "0.23", optional = true }
webpki = { version = "0.22", optional = true }
rustls-native-certs = { version = "0.6", optional = true }
rustls-pemfile = { version = "1.0", optional = true }
 
# browser
serde_json = { version = "1.0", optional = true }

async-tungstenite = { version = "0.12", default-features = false, features = [
	"tokio-runtime",
], optional = true }
http = { version = "0.2", optional = true }
httparse = { version = "1.3", optional = true }
base64 = { version = "0.13", optional = true }

# crypto
md-5 = { version = "0.9", optional = true }
sha2 = { version = "0.9", optional = true }
hkdf = { version = "0.11", optional = true }
sha-1 = { version = "0.9", optional = true }
crc = { version = "1.8", optional = true }
aes = { version = "0.7", optional = true }
cfb-mode = { version = "0.7.1", optional = true }
ring = { version = "0.16", optional = true }
openssl = { version = "0.10", optional = true }
rustls = { version = "0.20", optional = true }

# vmess
hmac = { version = "0.11", optional = true }
uuid = { version = "0.8", optional = true, default-features = false, features = [
	"serde",
	"v4",
] }
sha3 = { version = "0.9", optional = true }

[dev-dependencies]
env_logger = "0.8"
reqwest = { version = "0.11", features = ["socks"] }
toml = "0.5"
hyper = { version = "0.14", features = ["server"] }
criterion = "0.3"

[build-dependencies]
protobuf-codegen-pure = { version = "2.24", optional = true }


[[bench]]
name = "router_benchmark"
harness = false
